package com.pangolex.magicspring.dto;

import com.pangolex.magicspring.entity.Card;
import com.pangolex.magicspring.model.card.CardBorderColor;
import com.pangolex.magicspring.model.card.CardRarity;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@RequiredArgsConstructor
public class CardDTO {
    private Integer id;
    private String artist;
    private String asciiName;
    private String availability;
    private CardBorderColor borderColor;
    private String cardKingdomFoilId;
    private String cardKingdomId;
    private String colorIdentity;
    private String colorIndicator;
    private String colors;
    private Long convertedManaCost;
    private String duelDeck;
    private Integer edhrecRank;
    private Float faceConvertedManaCost;
    private String faceName;
    private String finishes;
    private String flavorName;
    private String flavorText;
    private String frameEffects;
    private String frameVersion;
    private String hand;
    private Integer hasAlternativeDeckLimit;
    private Integer hasContentWarning;
    private Integer hasFoil;
    private Integer hasNonFoil;
    private Integer isAlternative;
    private Integer isFullArt;
    private Integer isOnlineOnly;
    private Integer isOversized;
    private Integer isPromo;
    private Integer isReprint;
    private Integer isReserved;
    private Integer isStarter;
    private Integer isStorySpotlight;
    private Integer isTextless;
    private Integer isTimeshifted;
    private String keywords;
    private String layout;
    private String leadershipSkills;
    private String life;
    private String loyalty;
    private String manaCost;
    private String mcmId;
    private String mcmMetaId;
    private String mtgArenaId;
    private String mtgjsonV4Id;
    private String mtgoFoilId;
    private String mtgoId;
    private String multiverseId;
    private String name;
    private String number;
    private String originalReleaseDate;
    private String originalText;
    private String originalType;
    private String otherFaceIds;
    private String power;
    private String printings;
    private String promoTypes;
    private String purchaseUrls;
    private CardRarity rarity;
    private String scryfallId;
    private String scryfallIllustrationId;
    private String scryfallOracleId;
    private String setCode;
    private String side;
    private String subtypes;
    private String supertypes;
    private String tcgplayerEtchedProductId;
    private String tcgplayerProductId;
    private String text;
    private String toughness;
    private String type;
    private String types;
    private String uuid;
    private String variations;
    private String watermark;

    public void EntityToDTO(Card card){
        this.id = card.getId();
        this.artist = card.getArtist();
        this.asciiName = card.getAsciiName();
        this.availability = card.getAvailability();
        this.borderColor = card.getBorderColor();
        this.cardKingdomFoilId = card.getCardKingdomFoilId();
        this.cardKingdomId = card.getCardKingdomId();
        this.colorIdentity = card.getColorIdentity();
        this.colorIndicator = card.getColorIndicator();
        this.colors = card.getColors();
        this.convertedManaCost = card.getConvertedManaCost();
        this.duelDeck = card.getDuelDeck();
        this.edhrecRank = card.getEdhrecRank();
        this.faceConvertedManaCost = card.getFaceConvertedManaCost();
        this.faceName = card.getFaceName();
        this.finishes = card.getFinishes();
        this.flavorName = card.getFlavorName();
        this.flavorText = card.getFlavorText();
        this.frameEffects = card.getFrameEffects();
        this.frameVersion = card.getFrameVersion();
        this.hand = card.getHand();
        this.hasAlternativeDeckLimit = card.getHasAlternativeDeckLimit();
        this.hasContentWarning = card.getHasContentWarning();
        this.hasFoil = card.getHasFoil();
        this.hasNonFoil = card.getHasNonFoil();
        this.isAlternative = card.getIsAlternative();
        this.isFullArt = card.getIsFullArt();
        this.isOnlineOnly = card.getIsOnlineOnly();
        this.isOversized = card.getIsOversized();
        this.isPromo = card.getIsPromo();
        this.isReprint = card.getIsReprint();
        this.isReserved = card.getIsReserved();
        this.isStarter = card.getIsStarter();
        this.isStorySpotlight = card.getIsStorySpotlight();
        this.isTextless = card.getIsTextless();
        this.isTimeshifted = card.getIsTimeshifted();
        this.keywords = card.getKeywords();
        this.layout = card.getLayout();
        this.leadershipSkills = card.getLeadershipSkills();
        this.life = card.getLife();
        this.loyalty = card.getLoyalty();
        this.manaCost = card.getManaCost();
        this.mcmId = card.getMcmId();
        this.mcmMetaId = card.getMcmMetaId();
        this.mtgArenaId = card.getMtgArenaId();
        this.mtgjsonV4Id = card.getMtgjsonV4Id();
        this.mtgoFoilId = card.getMtgoFoilId();
        this.mtgoId = card.getMtgoId();
        this.multiverseId = card.getMultiverseId();
        this.name = card.getName();
        this.number = card.getNumber();
        this.originalReleaseDate = card.getOriginalReleaseDate();
        this.originalText = card.getOriginalText();
        this.originalType = card.getOriginalType();
        this.otherFaceIds = card.getOtherFaceIds();
        this.power = card.getPower();
        this.printings = card.getPrintings();
        this.promoTypes = card.getPromoTypes();
        this.purchaseUrls = card.getPurchaseUrls();
        this.rarity = card.getRarity();
        this.scryfallId = card.getScryfallId();
        this.scryfallIllustrationId = card.getScryfallIllustrationId();
        this.scryfallOracleId = card.getScryfallOracleId();
        this.setCode = card.getSetCode();
        this.side = card.getSide();
        this.subtypes = card.getSubtypes();
        this.supertypes = card.getSupertypes();
        this.tcgplayerEtchedProductId = card.getTcgplayerEtchedProductId();
        this.tcgplayerProductId = card.getTcgplayerProductId();
        this.text = card.getText();
        this.toughness = card.getToughness();
        this.type = card.getType();
        this.types = card.getTypes();
        this.uuid = card.getUuid();
        this.variations = card.getVariations();
        this.watermark = card.getWatermark();
    }

    public Card DTOToEntity(){
        Card card = new Card();
        card.setId(id);
        card.setArtist(artist);
        card.setAsciiName(asciiName);
        card.setAvailability(availability);
        card.setBorderColor(borderColor);
        card.setCardKingdomId(cardKingdomFoilId);
        card.setCardKingdomId(cardKingdomId);
        card.setColorIdentity(colorIdentity);
        card.setColorIndicator(colorIndicator);
        card.setColors(colors);
        card.setConvertedManaCost(convertedManaCost);
        card.setDuelDeck(duelDeck);
        card.setEdhrecRank(edhrecRank);
        card.setFaceConvertedManaCost(faceConvertedManaCost);
        card.setFaceName(faceName);
        card.setFinishes(finishes);
        card.setFlavorName(flavorName);
        card.setFlavorText(flavorText);
        card.setFrameEffects(frameEffects);
        card.setFrameVersion(frameVersion);
        card.setHand(hand);
        card.setHasContentWarning(hasContentWarning);
        card.setHasFoil(hasFoil);
        card.setHasFoil(hasNonFoil);
        card.setIsAlternative(isAlternative);
        card.setIsFullArt(isFullArt);
        card.setIsOnlineOnly(isOnlineOnly);
        card.setIsOversized(isOversized);
        card.setIsPromo(isPromo);
        card.setIsReprint(isReprint);
        card.setIsReserved(isReserved);
        card.setIsStarter(isStarter);
        card.setIsStorySpotlight(isStorySpotlight);
        card.setIsTextless(isTextless);
        card.setIsTimeshifted(isTimeshifted);
        card.setKeywords(keywords);
        card.setLayout(layout);
        card.setLeadershipSkills(leadershipSkills);
        card.setLife(life);
        card.setLoyalty(loyalty);
        card.setManaCost(manaCost);
        card.setMcmId(mcmId);
        card.setMcmMetaId(mcmMetaId);
        card.setMtgArenaId(mtgArenaId);
        card.setMtgjsonV4Id(mtgjsonV4Id);
        card.setMtgoFoilId(mtgoFoilId);
        card.setMtgoId(mtgoId);
        card.setMultiverseId(multiverseId);
        card.setName(name);
        card.setNumber(number);
        card.setOriginalReleaseDate(originalReleaseDate);
        card.setOriginalText(originalText);
        card.setOriginalType(originalType);
        card.setOtherFaceIds(otherFaceIds);
        card.setPower(power);
        card.setPrintings(printings);
        card.setPromoTypes(promoTypes);
        card.setPurchaseUrls(purchaseUrls);
        card.setRarity(rarity);
        card.setScryfallId(scryfallId);
        card.setScryfallIllustrationId(scryfallIllustrationId);
        card.setScryfallOracleId(scryfallOracleId);
        card.setSetCode(setCode);
        card.setSide(side);
        card.setSubtypes(subtypes);
        card.setSupertypes(supertypes);
        card.setTcgplayerEtchedProductId(tcgplayerEtchedProductId);
        card.setTcgplayerProductId(tcgplayerProductId);
        card.setText(text);
        card.setToughness(toughness);
        card.setType(type);
        card.setTypes(types);
        card.setUuid(uuid);
        card.setVariations(variations);
        card.setWatermark(watermark);
        return card;
    }
}
